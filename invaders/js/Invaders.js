// Generated by CoffeeScript 1.3.1
(function() {
  var Invader, Invaders,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  this.WIDTH = 640;

  this.HEIGHT = 480;

  this.BACKGROUND_COLOR = 0x0000000;

  this.VIEW_ANGLE = 45;

  this.NEAR = 1;

  this.FAR = 10000;

  this.CAMERA_DISTANCE = 500;

  this.ASPECT = this.WIDTH / this.HEIGHT;

  Invaders = (function() {

    Invaders.name = 'Invaders';

    function Invaders(container) {
      this._animate = __bind(this._animate, this);
      this.container = container;
      this._init();
      this._animate();
    }

    Invaders.prototype._init = function() {
      this._createScene();
      return this._addRandomInvader();
    };

    Invaders.prototype._animate = function() {
      requestAnimationFrame(this._animate);
      return this.renderer.render(this.scene, this.camera);
    };

    Invaders.prototype._createScene = function() {
      var light1;
      this.scene = new THREE.Scene();
      this.renderer = new THREE.WebGLRenderer();
      this.renderer.setSize(WIDTH, HEIGHT);
      this.renderer.setClearColorHex(BACKGROUND_COLOR, 1.0);
      this.camera = new THREE.PerspectiveCamera(VIEW_ANGLE, ASPECT, NEAR, FAR);
      this.camera.position.x = WIDTH / 2.0;
      this.camera.position.y = HEIGHT / 2.0;
      this.camera.position.z = CAMERA_DISTANCE;
      this.scene.add(this.camera);
      light1 = new THREE.DirectionalLight(0xffffff);
      light1.position.set(0, 0, 1).normalize();
      this.scene.add(light1);
      return this.container.appendChild(this.renderer.domElement);
    };

    Invaders.prototype._addRandomInvader = function() {
      var invader;
      invader = new Invader(100);
      invader.position.set(WIDTH / 2, HEIGHT / 2, 0);
      return this.scene.add(invader);
    };

    return Invaders;

  })();

  Invader = (function(_super) {

    __extends(Invader, _super);

    Invader.name = 'Invader';

    function Invader(seed) {
      Invader.__super__.constructor.call(this);
      this.seed = seed;
      this._init();
    }

    Invader.prototype._init = function() {
      this._createMaterial();
      return this._build();
    };

    Invader.prototype._build = function() {
      var cube;
      cube = new THREE.Mesh(new THREE.CubeGeometry(10, 10, 10), this.material);
      return this.add(cube);
    };

    Invader.prototype._createMaterial = function() {
      return this.material = new THREE.MeshPhongMaterial({
        color: 0xFF0000,
        shininess: 100.0,
        specular: 0xFFFFFF
      });
    };

    return Invader;

  })(THREE.Object3D);

  this.startInvaders = function() {
    var container;
    container = document.createElement('div');
    document.body.appendChild(container);
    return new Invaders(container);
  };

}).call(this);
